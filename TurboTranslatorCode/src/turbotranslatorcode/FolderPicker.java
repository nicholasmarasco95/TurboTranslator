/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package turbotranslatorcode;

import java.io.File;
import javax.swing.JOptionPane;

/**
 *
 * @author nicho
 */
public class FolderPicker extends javax.swing.JDialog {

    /**
     * Creates new form FolderPicker
     */
    
    private Utils.PICKER_TYPE pickerType;
    private Settings settings;
    
    public FolderPicker(java.awt.Frame parent, boolean modal, Utils.PICKER_TYPE pickerType) {
        super(parent, modal);
        initComponents();
        this.pickerType = pickerType;
        this.settings = new Settings();
        
        dialogTitle();
    }
    
    private void pathManager(){
        //check type, get and save correct path
        String path;
        switch(pickerType) {
            case ADD_FILES:{
                path = getFilePath();
                if(path.length()<2){
                    //there was some error, show message and return
                    JOptionPane.showMessageDialog(this, "Path must be a file", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(!Utils.isFileSupported(Utils.getFileExtension(path))){
                    //check if file is supported
                    JOptionPane.showMessageDialog(this, "File not supported", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                settings.addPath(path);
                JOptionPane.showMessageDialog(this, "File added", "Info", JOptionPane.INFORMATION_MESSAGE);
                break;
            }
            case EXPORT_FOLDER:{
                path = getDirPath();
                if(path.length()<2){
                    //there was some error, show message and return
                    JOptionPane.showMessageDialog(this, "Directory path error", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                settings.saveSetting("string", Utils.SETTINGS_KEY.OUTPUT_FOLDER, path);
                JOptionPane.showMessageDialog(this, "Export Path Saved", "Info", JOptionPane.INFORMATION_MESSAGE);
                break;
            }
            case IMPORT_FILE:{
                path = getFilePath();
                if(path.length()<2){
                    //there was some error, show message and return
                    JOptionPane.showMessageDialog(this, "File path error", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if(!Utils.isImportFileSupported(Utils.getFileExtension(path))){
                    //check if file is supported
                    JOptionPane.showMessageDialog(this, "File not supported", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                Utils.IMPORT_FILE_PATH = path;
                break;
            }
        }
        this.dispose(); //close dialog once file has been chosen (and all gone well)
    }
    
    private String getDirPath(){
        String dirPath;
        try{
            dirPath = fileChooser.getCurrentDirectory().getAbsolutePath();
        }catch(Exception e){
            System.err.println("getDirPath error: " + e);
            return "";
        }
        if(dirPath == null) return "";
        return dirPath;
    }
    
    private String getFilePath(){
        String filePath;
        try{
            filePath = fileChooser.getSelectedFile().getAbsolutePath();
        }catch(Exception e){
            System.err.println("getFilePath error: " + e);
            return "";
        }
        if(filePath == null) return "";
        return filePath;
    }
    
    private void dialogTitle(){
        switch(pickerType){
            case ADD_FILES:{
                this.setTitle("File to translate chooser");
                break;
            }
            case EXPORT_FOLDER:{
                this.setTitle("Export folder chooser");
                break;
            }
            case IMPORT_FILE:{
                this.setTitle("Import File chooser");
                break;
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jSeparator1 = new javax.swing.JSeparator();
        btnSavePath = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnSavePath.setText("OK");
        btnSavePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSavePathActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fileChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 545, Short.MAX_VALUE)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSavePath, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 314, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSavePath)
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSavePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSavePathActionPerformed
        pathManager();
    }//GEN-LAST:event_btnSavePathActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FolderPicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FolderPicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FolderPicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FolderPicker.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                FolderPicker dialog = new FolderPicker(new javax.swing.JFrame(), true, Utils.PICKER_TYPE.ADD_FILES);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSavePath;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JSeparator jSeparator1;
    // End of variables declaration//GEN-END:variables
}
